// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  CancelUserSubscriptionByIdData,
  CancelUserSubscriptionByIdResponse,
  CancelUserSubscriptionData,
  CancelUserSubscriptionResponse,
  CreateStripeCheckoutSessionData,
  CreateStripeCheckoutSessionResponse,
  CreateSubscriptionPlanData,
  CreateSubscriptionPlanResponse,
  CreateUserData,
  CreateUserResponse,
  DeleteSubscriptionPlanData,
  DeleteSubscriptionPlanResponse,
  DeleteUserData,
  DeleteUserMeResponse,
  DeleteUserResponse,
  GetConfigData,
  GetConfigResponse,
  GetPlainTextResumeData,
  GetPlainTextResumeResponse,
  GetStripeCheckoutSessionByIdData,
  GetStripeCheckoutSessionByIdResponse,
  GetStripeCheckoutSessionsData,
  GetStripeCheckoutSessionsResponse,
  GetUserSubscriptionsByIdData,
  GetUserSubscriptionsByIdResponse,
  GetUserSubscriptionsData,
  GetUserSubscriptionsResponse,
  HealthCheckResponse,
  LoginAccessTokenData,
  LoginAccessTokenResponse,
  ReactivateUserSubscriptionByIdData,
  ReactivateUserSubscriptionByIdResponse,
  ReactivateUserSubscriptionData,
  ReactivateUserSubscriptionResponse,
  ReadPaymentsByCurrentUserData,
  ReadPaymentsByCurrentUserResponse,
  ReadPaymentsByUserIdData,
  ReadPaymentsByUserIdResponse,
  ReadPaymentsData,
  ReadPaymentsResponse,
  ReadSubscriptionPlanData,
  ReadSubscriptionPlanResponse,
  ReadSubscriptionPlansData,
  ReadSubscriptionPlansResponse,
  ReadUserByIdData,
  ReadUserByIdResponse,
  ReadUserMeResponse,
  ReadUsersData,
  ReadUsersResponse,
  RecoverPasswordData,
  RecoverPasswordHtmlContentData,
  RecoverPasswordHtmlContentResponse,
  RecoverPasswordResponse,
  RegisterUserData,
  RegisterUserResponse,
  ResetPasswordData,
  ResetPasswordResponse,
  StripeCancelData,
  StripeCancelResponse,
  StripeSuccessData,
  StripeSuccessResponse,
  StripeWebhookData,
  StripeWebhookResponse,
  TestEmailData,
  TestEmailResponse,
  TestTokenResponse,
  UpdateConfigData,
  UpdateConfigResponse,
  UpdatePasswordMeData,
  UpdatePasswordMeResponse,
  UpdatePlainTextResumeData,
  UpdatePlainTextResumeResponse,
  UpdateStripeCheckoutSessionData,
  UpdateStripeCheckoutSessionResponse,
  UpdateSubscriptionPlanData,
  UpdateSubscriptionPlanResponse,
  UpdateUserData,
  UpdateUserMeData,
  UpdateUserMeResponse,
  UpdateUserResponse,
} from "./types.gen"

export class CheckoutService {
  /**
   * Stripe Success
   * Stripe success route: usuário retornou do Stripe com session_id.
   * @param data The data for the request.
   * @param data.sessionId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static stripeSuccess(
    data: StripeSuccessData,
  ): CancelablePromise<StripeSuccessResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/checkout/stripe/success",
      query: {
        session_id: data.sessionId,
      },
      errors: {
        403: "Authorization errors",
        404: "Resource not found",
        422: "Validation Error",
        500: "Subscription plan not found",
      },
    })
  }

  /**
   * Get Stripe Checkout Session By Id
   * Get Stripe checkout session by ID.
   * @param data The data for the request.
   * @param data.sessionId
   * @returns CheckoutSessionPublic Successful Response
   * @throws ApiError
   */
  public static getStripeCheckoutSessionById(
    data: GetStripeCheckoutSessionByIdData,
  ): CancelablePromise<GetStripeCheckoutSessionByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/checkout/stripe/checkout-session/{session_id}",
      path: {
        session_id: data.sessionId,
      },
      errors: {
        403: "Could not validate credentials",
        404: "Resource not found",
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Stripe Checkout Session
   * Update Stripe checkout session.
   * @param data The data for the request.
   * @param data.sessionId
   * @param data.requestBody
   * @returns CheckoutSessionPublic Successful Response
   * @throws ApiError
   */
  public static updateStripeCheckoutSession(
    data: UpdateStripeCheckoutSessionData,
  ): CancelablePromise<UpdateStripeCheckoutSessionResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/checkout/stripe/checkout-session/{session_id}",
      path: {
        session_id: data.sessionId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "Authorization errors",
        404: "Resource not found",
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Stripe Checkout Sessions
   * Get Stripe checkout sessions.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns CheckoutSessionPublic Successful Response
   * @throws ApiError
   */
  public static getStripeCheckoutSessions(
    data: GetStripeCheckoutSessionsData = {},
  ): CancelablePromise<GetStripeCheckoutSessionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/checkout/stripe/checkout-session",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        403: "Authorization errors",
        404: "Resource not found",
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Stripe Checkout Session
   * Create Stripe checkout session.
   * @param data The data for the request.
   * @param data.subscriptionPlanId
   * @returns CheckoutSessionPublic Successful Response
   * @throws ApiError
   */
  public static createStripeCheckoutSession(
    data: CreateStripeCheckoutSessionData,
  ): CancelablePromise<CreateStripeCheckoutSessionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/checkout/stripe/checkout-session",
      query: {
        subscription_plan_id: data.subscriptionPlanId,
      },
      errors: {
        403: "Could not validate credentials",
        404: "Resource not found",
        422: "Validation Error",
      },
    })
  }

  /**
   * Stripe Webhook
   * @param data The data for the request.
   * @param data.stripeSignature
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static stripeWebhook(
    data: StripeWebhookData = {},
  ): CancelablePromise<StripeWebhookResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/checkout/stripe/webhook",
      headers: {
        "stripe-signature": data.stripeSignature,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Stripe Cancel
   * Stripe cancel route: usuário retornou do Stripe pela URL de cancelamento.
   * @param data The data for the request.
   * @param data.sessionId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static stripeCancel(
    data: StripeCancelData,
  ): CancelablePromise<StripeCancelResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/checkout/stripe/cancel",
      query: {
        session_id: data.sessionId,
      },
      errors: {
        403: "Authorization errors",
        404: "Resource not found",
        422: "Validation Error",
        500: "Subscription plan not found, please contact support!",
      },
    })
  }
}

export class ConfigsService {
  /**
   * Get Config
   * @param data The data for the request.
   * @param data.subscriptionId
   * @returns ConfigPublic Successful Response
   * @throws ApiError
   */
  public static getConfig(
    data: GetConfigData,
  ): CancelablePromise<GetConfigResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/configs/{subscription_id}/job-preferences",
      path: {
        subscription_id: data.subscriptionId,
      },
      errors: {
        403: "Authorization error",
        404: "Resource not found",
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Config
   * Update config.
   * @param data The data for the request.
   * @param data.subscriptionId
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static updateConfig(
    data: UpdateConfigData,
  ): CancelablePromise<UpdateConfigResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/configs/{subscription_id}/job-preferences",
      path: {
        subscription_id: data.subscriptionId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "Authorization error",
        404: "Resource not found",
        422: "Validation Error",
      },
    })
  }

  /**
   * Get Plain Text Resume
   * @param data The data for the request.
   * @param data.subscriptionId
   * @returns PlainTextResumePublic Successful Response
   * @throws ApiError
   */
  public static getPlainTextResume(
    data: GetPlainTextResumeData,
  ): CancelablePromise<GetPlainTextResumeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/configs/{subscription_id}/resume",
      path: {
        subscription_id: data.subscriptionId,
      },
      errors: {
        403: "Authorization error",
        404: "Resource not found",
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Plain Text Resume
   * Update plain text resume.
   * @param data The data for the request.
   * @param data.subscriptionId
   * @param data.requestBody
   * @returns unknown Successful Response
   * @throws ApiError
   */
  public static updatePlainTextResume(
    data: UpdatePlainTextResumeData,
  ): CancelablePromise<UpdatePlainTextResumeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/configs/{subscription_id}/resume",
      path: {
        subscription_id: data.subscriptionId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        403: "Authorization error",
        404: "Resource not found",
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static accessToken(
    data: LoginAccessTokenData,
  ): CancelablePromise<LoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<TestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: RecoverPasswordData,
  ): CancelablePromise<RecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: ResetPasswordData,
  ): CancelablePromise<ResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Recover Password Html Content
   * HTML Content for Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns string Successful Response
   * @throws ApiError
   */
  public static recoverPasswordHtmlContent(
    data: RecoverPasswordHtmlContentData,
  ): CancelablePromise<RecoverPasswordHtmlContentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery-html-content/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class PaymentsService {
  /**
   * Read Payments By Current User
   * Retrieve payments for the current user.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns PaymentsPublic Successful Response
   * @throws ApiError
   */
  public static readPaymentsByCurrentUser(
    data: ReadPaymentsByCurrentUserData = {},
  ): CancelablePromise<ReadPaymentsByCurrentUserResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me/payments",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Payments By User Id
   * Retrieve payments by user id.
   * @param data The data for the request.
   * @param data.userId
   * @param data.skip
   * @param data.limit
   * @returns PaymentsPublic Successful Response
   * @throws ApiError
   */
  public static readPaymentsByUserId(
    data: ReadPaymentsByUserIdData,
  ): CancelablePromise<ReadPaymentsByUserIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}/payments",
      path: {
        user_id: data.userId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Payments
   * Retrieve all payments.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns PaymentsPublic Successful Response
   * @throws ApiError
   */
  public static readPayments(
    data: ReadPaymentsData = {},
  ): CancelablePromise<ReadPaymentsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/payments/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class SubscriptionPlansService {
  /**
   * Read Subscription Plans
   * Retrieve subscription plans (public endpoint).
   * @param data The data for the request.
   * @param data.onlyActive
   * @returns SubscriptionPlansPublic Successful Response
   * @throws ApiError
   */
  public static readSubscriptionPlans(
    data: ReadSubscriptionPlansData = {},
  ): CancelablePromise<ReadSubscriptionPlansResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/subscription-plans/",
      query: {
        only_active: data.onlyActive,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Subscription Plan
   * Create new subscription plan (superuser only).
   * @param data The data for the request.
   * @param data.requestBody
   * @returns SubscriptionPlanPublic Successful Response
   * @throws ApiError
   */
  public static createSubscriptionPlan(
    data: CreateSubscriptionPlanData,
  ): CancelablePromise<CreateSubscriptionPlanResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/subscription-plans/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Subscription Plan
   * Get subscription plan by ID (public endpoint).
   * @param data The data for the request.
   * @param data.id
   * @returns SubscriptionPlanPublic Successful Response
   * @throws ApiError
   */
  public static readSubscriptionPlan(
    data: ReadSubscriptionPlanData,
  ): CancelablePromise<ReadSubscriptionPlanResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/subscription-plans/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Subscription Plan
   * Update a subscription plan (superuser only).
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updateSubscriptionPlan(
    data: UpdateSubscriptionPlanData,
  ): CancelablePromise<UpdateSubscriptionPlanResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/subscription-plans/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Subscription Plan
   * Delete a subscription plan (superuser only).
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteSubscriptionPlan(
    data: DeleteSubscriptionPlanData,
  ): CancelablePromise<DeleteSubscriptionPlanResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/subscription-plans/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class SubscriptionsService {
  /**
   * Get User Subscriptions
   * Get user subscription.
   * @param data The data for the request.
   * @param data.onlyActive
   * @returns SubscriptionPublic Successful Response
   * @throws ApiError
   */
  public static getUserSubscriptions(
    data: GetUserSubscriptionsData = {},
  ): CancelablePromise<GetUserSubscriptionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me/subscriptions",
      query: {
        only_active: data.onlyActive,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get User Subscriptions By Id
   * Get user subscription by id.
   * @param data The data for the request.
   * @param data.userId
   * @param data.onlyActive
   * @returns SubscriptionPublic Successful Response
   * @throws ApiError
   */
  public static getUserSubscriptionsById(
    data: GetUserSubscriptionsByIdData,
  ): CancelablePromise<GetUserSubscriptionsByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}/subscriptions",
      path: {
        user_id: data.userId,
      },
      query: {
        only_active: data.onlyActive,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Cancel User Subscription
   * Cancel user subscription (recurring payment).
   * @param data The data for the request.
   * @param data.subscriptionId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static cancelUserSubscription(
    data: CancelUserSubscriptionData,
  ): CancelablePromise<CancelUserSubscriptionResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me/subscriptions/{subscription_id}/cancel",
      path: {
        subscription_id: data.subscriptionId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reactivate User Subscription
   * Reactivate user subscription if still in 'cancel_at_period_end' window.
   * @param data The data for the request.
   * @param data.subscriptionId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static reactivateUserSubscription(
    data: ReactivateUserSubscriptionData,
  ): CancelablePromise<ReactivateUserSubscriptionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/me/subscriptions/{subscription_id}/reactivate",
      path: {
        subscription_id: data.subscriptionId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Cancel User Subscription By Id
   * Cancel user subscription by id (recurring payment on Stripe).
   * @param data The data for the request.
   * @param data.userId
   * @param data.subscriptionId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static cancelUserSubscriptionById(
    data: CancelUserSubscriptionByIdData,
  ): CancelablePromise<CancelUserSubscriptionByIdResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}/subscriptions/{subscription_id}/cancel",
      path: {
        user_id: data.userId,
        subscription_id: data.subscriptionId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reactivate User Subscription By Id
   * Reactivate user subscription by id.
   * @param data The data for the request.
   * @param data.userId
   * @param data.subscriptionId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static reactivateUserSubscriptionById(
    data: ReactivateUserSubscriptionByIdData,
  ): CancelablePromise<ReactivateUserSubscriptionByIdResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/{user_id}/subscriptions/{subscription_id}/reactivate",
      path: {
        user_id: data.userId,
        subscription_id: data.subscriptionId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsers(
    data: ReadUsersData = {},
  ): CancelablePromise<ReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: CreateUserData,
  ): CancelablePromise<CreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<ReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<DeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UpdateUserMeData,
  ): CancelablePromise<UpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UpdatePasswordMeData,
  ): CancelablePromise<UpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: RegisterUserData,
  ): CancelablePromise<RegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserById(
    data: ReadUserByIdData,
  ): CancelablePromise<ReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UpdateUserData,
  ): CancelablePromise<UpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: DeleteUserData,
  ): CancelablePromise<DeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get User Subscriptions
   * Get user subscription.
   * @param data The data for the request.
   * @param data.onlyActive
   * @returns SubscriptionPublic Successful Response
   * @throws ApiError
   */
  public static getUserSubscriptions(
    data: GetUserSubscriptionsData = {},
  ): CancelablePromise<GetUserSubscriptionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me/subscriptions",
      query: {
        only_active: data.onlyActive,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Get User Subscriptions By Id
   * Get user subscription by id.
   * @param data The data for the request.
   * @param data.userId
   * @param data.onlyActive
   * @returns SubscriptionPublic Successful Response
   * @throws ApiError
   */
  public static getUserSubscriptionsById(
    data: GetUserSubscriptionsByIdData,
  ): CancelablePromise<GetUserSubscriptionsByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}/subscriptions",
      path: {
        user_id: data.userId,
      },
      query: {
        only_active: data.onlyActive,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Cancel User Subscription
   * Cancel user subscription (recurring payment).
   * @param data The data for the request.
   * @param data.subscriptionId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static cancelUserSubscription(
    data: CancelUserSubscriptionData,
  ): CancelablePromise<CancelUserSubscriptionResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me/subscriptions/{subscription_id}/cancel",
      path: {
        subscription_id: data.subscriptionId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reactivate User Subscription
   * Reactivate user subscription if still in 'cancel_at_period_end' window.
   * @param data The data for the request.
   * @param data.subscriptionId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static reactivateUserSubscription(
    data: ReactivateUserSubscriptionData,
  ): CancelablePromise<ReactivateUserSubscriptionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/me/subscriptions/{subscription_id}/reactivate",
      path: {
        subscription_id: data.subscriptionId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Cancel User Subscription By Id
   * Cancel user subscription by id (recurring payment on Stripe).
   * @param data The data for the request.
   * @param data.userId
   * @param data.subscriptionId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static cancelUserSubscriptionById(
    data: CancelUserSubscriptionByIdData,
  ): CancelablePromise<CancelUserSubscriptionByIdResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}/subscriptions/{subscription_id}/cancel",
      path: {
        user_id: data.userId,
        subscription_id: data.subscriptionId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reactivate User Subscription By Id
   * Reactivate user subscription by id.
   * @param data The data for the request.
   * @param data.userId
   * @param data.subscriptionId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static reactivateUserSubscriptionById(
    data: ReactivateUserSubscriptionByIdData,
  ): CancelablePromise<ReactivateUserSubscriptionByIdResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/{user_id}/subscriptions/{subscription_id}/reactivate",
      path: {
        user_id: data.userId,
        subscription_id: data.subscriptionId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Payments By Current User
   * Retrieve payments for the current user.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns PaymentsPublic Successful Response
   * @throws ApiError
   */
  public static readPaymentsByCurrentUser(
    data: ReadPaymentsByCurrentUserData = {},
  ): CancelablePromise<ReadPaymentsByCurrentUserResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me/payments",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Payments By User Id
   * Retrieve payments by user id.
   * @param data The data for the request.
   * @param data.userId
   * @param data.skip
   * @param data.limit
   * @returns PaymentsPublic Successful Response
   * @throws ApiError
   */
  public static readPaymentsByUserId(
    data: ReadPaymentsByUserIdData,
  ): CancelablePromise<ReadPaymentsByUserIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}/payments",
      path: {
        user_id: data.userId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Test Email
   * Test emails.
   * @param data The data for the request.
   * @param data.emailTo
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static testEmail(
    data: TestEmailData,
  ): CancelablePromise<TestEmailResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/utils/test-email/",
      query: {
        email_to: data.emailTo,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<HealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }
}
