// This file is auto-generated by @hey-api/openapi-ts

export type Achievement = {
  /**
   * Achievement title
   */
  name: string
  /**
   * Achievement description
   */
  description: string
}

/**
 * Modelo para resposta de ação do usuário
 */
export type ActionResponse = {
  user_input: string
}

/**
 * Modelo para resposta de sessões ativas
 */
export type ActiveSessionsResponse = {
  total: number
  items: Array<BotSession>
}

/**
 * Modelo para resposta de listagem de aplicações
 */
export type AppliesResponse = {
  total: number
  items: Array<ApplyPublic>
}

/**
 * Modelo para exibição pública de uma aplicação de emprego
 */
export type ApplyPublic = {
  id: number
  bot_session_id: string
  status?: BotApplyStatus
  /**
   * Total time in seconds
   */
  total_time?: number
  job_title?: string | null
  job_url?: string | null
  company_name?: string | null
}

/**
 * Modelo para resumo de aplicações
 */
export type ApplySummary = {
  total_applies: number
  by_status: {
    [key: string]: number
  }
  by_company: {
    [key: string]: number
  }
  total_time_seconds: number
  latest_applies: Array<ApplyPublic>
}

export type Availability = {
  /**
   * Required notice period
   */
  notice_period: string
}

export type Body_login_login_access_token = {
  grant_type?: string | null
  username: string
  password: string
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

/**
 * Request model for creating a new apply record
 */
export type BotApplyCreate = {
  status?: BotApplyStatus
  total_time?: number
  job_title?: string | null
  job_url?: string | null
  company_name?: string | null
  failed_reason?: string | null
}

/**
 * Status possíveis para uma aplicação.
 */
export type BotApplyStatus = "success" | "failed"

/**
 * Response model for bot configuration
 */
export type BotConfigResponse = {
  user_config: string
  user_resume: string
}

/**
 * Sessão do bot.
 */
export type BotSession = {
  id?: string
  user_id: string
  credentials_id: string
  applies_limit?: number
  style?: BotStyleChoice
  api_key?: string
  status?: BotSessionStatus
  kubernetes_pod_name?: string
  kubernetes_namespace?: string
  kubernetes_pod_status?: KubernetesPodStatus | null
  kubernetes_pod_ip?: string | null
  total_applied?: number
  total_success?: number
  total_failed?: number
  created_at?: string
  started_at?: string | null
  finished_at?: string | null
  resumed_at?: string | null
  paused_at?: string | null
  total_paused_time?: number
  last_heartbeat_at?: string | null
  last_status_message?: string | null
  error_message?: string | null
}

/**
 * Estados possíveis para uma sessão do bot.
 */
export type BotSessionStatus =
  | "starting"
  | "running"
  | "paused"
  | "stopping"
  | "stopped"
  | "failed"
  | "completed"
  | "waiting"

/**
 * Estilos visuais disponíveis para o bot.
 */
export type BotStyleChoice =
  | "Cloyola Grey"
  | "Modern Blue"
  | "Modern Grey"
  | "Default"
  | "Clean Blue"

export type Certification = {
  /**
   * Certification name
   */
  name: string
  /**
   * Certification description
   */
  description: string
}

/**
 * Modelo de sessão de checkout para retorno via API.
 */
export type CheckoutSessionPublic = {
  id: string
  session_id: string
  session_url: string
  expires_at: string
}

/**
 * Modelo para atualização de sessões de checkout via API.
 */
export type CheckoutSessionUpdate = {
  payment_gateway?: string | null
  session_id?: string | null
  session_url?: string | null
  user_id?: string | null
  status?: string | null
  subscription_plan_id?: string | null
  payment_status?: string | null
  created_at?: string | null
  expires_at?: string | null
  updated_at?: string | null
}

export type ConfigPublic = {
  remote?: boolean
  experience_level?: ExperienceLevel
  job_types?: JobTypes
  date?: Date
  positions?: Array<string>
  locations?: Array<string>
  apply_once_at_company?: boolean
  distance?: number
  company_blacklist?: Array<string>
  title_blacklist?: Array<string>
  location_blacklist?: Array<string>
}

/**
 * Modelo para criação de credenciais
 */
export type CredentialsCreate = {
  email: string
  password: string
}

/**
 * Modelo para exibição pública de credenciais
 */
export type CredentialsPublic = {
  id: string
  email: string
  password: string
}

export type CredentialsResponse = {
  total: number
  items: Array<CredentialsPublic>
}

/**
 * Modelo para atualização de credenciais
 */
export type CredentialsUpdate = {
  email?: string | null
  password?: string | null
}

export type Date = {
  all_time?: boolean
  month?: boolean
  week?: boolean
  hours?: boolean
}

export type EducationDetails = {
  /**
   * Highest level of education
   */
  education_level: string
  /**
   * Educational institution name
   */
  institution: string
  /**
   * Major or field of study
   */
  field_of_study: string
  /**
   * Final grade or GPA
   */
  final_evaluation_grade: string
  /**
   * Year education started
   */
  start_date: string
  /**
   * Year education completed
   */
  year_of_completion: string
  /**
   * Standardized tests taken
   */
  exam: Array<string>
}

/**
 * Modelo para mensagens de erro.
 */
export type ErrorMessage = {
  detail: string
}

/**
 * Modelo para exibição pública de um evento
 */
export type EventPublic = {
  id: string
  bot_session_id: string
  type: string
  message: string
  severity?: string
  details?: {
    [key: string]: unknown
  } | null
  created_at: string
}

/**
 * Modelo para resposta de listagem de eventos
 */
export type EventsResponse = {
  total: number
  items: Array<EventPublic>
}

/**
 * Modelo para resumo de eventos
 */
export type EventSummary = {
  total_events: number
  by_type: {
    [key: string]: number
  }
  by_severity: {
    [key: string]: number
  }
  latest_events: Array<EventPublic>
}

export type ExperienceDetail = {
  /**
   * Job title
   */
  position: string
  /**
   * Company name
   */
  company: string
  /**
   * Period of employment
   */
  employment_period: string
  /**
   * Job location
   */
  location: string
  /**
   * Industry sector
   */
  industry: string
  /**
   * Main job responsibilities
   */
  key_responsibilities: Array<string>
  /**
   * Skills gained during employment
   */
  skills_acquired: Array<string>
}

export type ExperienceLevel = {
  intership?: boolean
  entry?: boolean
  associate?: boolean
  mid_senior_level?: boolean
  director?: boolean
  executive?: boolean
}

export type HTTPValidationError = {
  detail?: Array<ValidationError>
}

export type JobTypes = {
  full_time?: boolean
  contract?: boolean
  part_time?: boolean
  temporary?: boolean
  internship?: boolean
  other?: boolean
  volunteer?: boolean
}

/**
 * Modelo para resposta de pods Kubernetes
 */
export type KubernetesPodsResponse = {
  total: number
  items: Array<PodInfo>
}

/**
 * Estados possíveis para um pod no Kubernetes.
 */
export type KubernetesPodStatus =
  | "pending"
  | "running"
  | "succeeded"
  | "failed"
  | "unknown"
  | "terminating"

export type Language = {
  /**
   * Language name
   */
  language: string
  /**
   * Language proficiency level
   */
  proficiency: string
}

export type LegalAuthorization = {
  /**
   * Has EU work authorization
   */
  eu_work_authorization: boolean
  /**
   * Has US work authorization
   */
  us_work_authorization: boolean
  /**
   * Requires US visa
   */
  requires_us_visa: boolean
  /**
   * Requires US sponsorship
   */
  requires_us_sponsorship: boolean
  /**
   * Requires EU visa
   */
  requires_eu_visa: boolean
  /**
   * Legally allowed to work in EU
   */
  legally_allowed_to_work_in_eu: boolean
  /**
   * Legally allowed to work in US
   */
  legally_allowed_to_work_in_us: boolean
  /**
   * Requires EU sponsorship
   */
  requires_eu_sponsorship: boolean
  /**
   * Has Canada work authorization
   */
  canada_work_authorization: boolean
  /**
   * Requires Canada visa
   */
  requires_canada_visa: boolean
  /**
   * Legally allowed to work in Canada
   */
  legally_allowed_to_work_in_canada: boolean
  /**
   * Requires Canada sponsorship
   */
  requires_canada_sponsorship: boolean
  /**
   * Has UK work authorization
   */
  uk_work_authorization: boolean
  /**
   * Requires UK visa
   */
  requires_uk_visa: boolean
  /**
   * Legally allowed to work in UK
   */
  legally_allowed_to_work_in_uk: boolean
  /**
   * Requires UK sponsorship
   */
  requires_uk_sponsorship: boolean
}

/**
 * Modelo genérico para mensagens de resposta.
 */
export type Message = {
  message: string
}

/**
 * Modelo para redefinição de senha.
 */
export type NewPassword = {
  token: string
  new_password: string
}

/**
 * Modelo de pagamento para retorno via API.
 */
export type PaymentPublic = {
  id: string
  subscription_id: string
  user_id: string
  amount: number
  currency: string
  payment_date: string
  payment_status: string
  payment_gateway: string
  transaction_id: string
}

/**
 * Define os status de recorrência de pagamento.
 */
export type PaymentRecurrenceStatus =
  | "active"
  | "canceled"
  | "pending_cancellation"

/**
 * Modelo para retornar uma lista de pagamentos via API.
 */
export type PaymentsPublic = {
  data: Array<PaymentPublic>
  count: number
}

export type PersonalInformation = {
  /**
   * First name
   */
  name: string
  /**
   * Last name
   */
  surname: string
  /**
   * Date of birth in ISO format
   */
  date_of_birth: string
  /**
   * Country of residence
   */
  country: string
  /**
   * City of residence
   */
  city: string
  /**
   * Street address
   */
  address: string
  /**
   * Postal/ZIP code
   */
  zip_code: string
  /**
   * Phone country code
   */
  phone_prefix: string
  /**
   * Phone number without country code
   */
  phone: string
  /**
   * Email address
   */
  email: string
  /**
   * GitHub profile URL
   */
  github: string
  /**
   * LinkedIn profile URL
   */
  linkedin: string
}

export type PlainTextResumePublic = {
  /**
   * Personal contact information
   */
  personal_information: PersonalInformation
  /**
   * Educational background
   */
  education_details: Array<EducationDetails>
  /**
   * Work experience
   */
  experience_details: Array<ExperienceDetail>
  /**
   * Personal or professional projects
   */
  projects: Array<Project>
  /**
   * Notable achievements
   */
  achievements: Array<Achievement>
  /**
   * Professional certifications
   */
  certifications: Array<Certification>
  /**
   * Languages spoken
   */
  languages: Array<Language>
  /**
   * Personal interests and hobbies
   */
  interests: Array<string>
  /**
   * Work availability information
   */
  availability: Availability
  /**
   * Salary expectations
   */
  salary_expectations: SalaryExpectations
  /**
   * Self-identification information
   */
  self_identification: SelfIdentification
  /**
   * Work authorization status
   */
  legal_authorization: LegalAuthorization
  /**
   * Work preferences
   */
  work_preferences: WorkPreferences
}

/**
 * Modelo para informações de um pod Kubernetes
 */
export type PodInfo = {
  session_id: string
  kubernetes_pod_name: string
  kubernetes_namespace: string
  kubernetes_pod_status?: string | null
  kubernetes_pod_ip?: string | null
}

export type Project = {
  /**
   * Project name
   */
  name: string
  /**
   * Project description
   */
  description: string
  /**
   * Project URL
   */
  link: string
}

export type SalaryExpectations = {
  /**
   * Expected salary range in USD
   */
  salary_range_usd: string
}

export type SelfIdentification = {
  /**
   * Gender
   */
  gender: string
  /**
   * Preferred pronouns
   */
  pronouns: string
  /**
   * Veteran status
   */
  veteran: boolean
  /**
   * Disability status
   */
  disability: boolean
  /**
   * Ethnicity
   */
  ethnicity: string
}

/**
 * Modelo para criação de uma sessão de bot
 */
export type SessionCreate = {
  credentials_id: string
  applies_limit?: number
  style?: BotStyleChoice
}

export type SessionPublic = {
  id: string
  credentials_id: string
  applies_limit?: number
  style?: BotStyleChoice
  status: BotSessionStatus
  total_applied: number
  total_success: number
  total_failed: number
  api_key: string
  created_at: string
  started_at?: string | null
  finished_at?: string | null
  resumed_at?: string | null
  paused_at?: string | null
  total_paused_time: number
  last_heartbeat_at?: string | null
}

/**
 * Modelo para resposta de listagem de sessões
 */
export type SessionsResponse = {
  total: number
  items: Array<SessionPublic>
}

/**
 * Define os tipos de métricas para assinaturas.
 */
export type SubscriptionMetric = "day" | "week" | "month" | "year" | "applies"

/**
 * Modelo completo de plano de assinatura para armazenamento no banco de dados.
 */
export type SubscriptionPlan = {
  id?: string
  name: string
  price: number
  has_badge?: boolean
  badge_text?: string
  button_text?: string
  button_enabled?: boolean
  has_discount?: boolean
  price_without_discount?: number
  currency?: string
  description?: string
  is_active?: boolean
  metric_type?: SubscriptionMetric
  metric_value?: number
  stripe_product_id?: string | null
  stripe_price_id?: string | null
}

/**
 * Modelo público para benefícios de plano de assinatura.
 */
export type SubscriptionPlanBenefitPublic = {
  name: string
}

/**
 * Modelo para criação de planos de assinatura via API.
 */
export type SubscriptionPlanCreate = {
  name: string
  price: number
  has_badge?: boolean
  badge_text?: string
  button_text?: string
  button_enabled?: boolean
  has_discount?: boolean
  price_without_discount?: number
  currency?: string
  description?: string
  is_active?: boolean
  metric_type?: SubscriptionMetric
  metric_value?: number
  benefits?: Array<SubscriptionPlanBenefitPublic>
}

/**
 * Modelo público completo para planos de assinatura.
 */
export type SubscriptionPlanPublic = {
  id: string
  name: string
  price: number
  has_badge: boolean
  badge_text: string
  button_text: string
  button_enabled: boolean
  has_discount: boolean
  price_without_discount: number
  currency: string
  description: string
  is_active: boolean
  metric_type: SubscriptionMetric
  metric_value: number
  benefits?: Array<SubscriptionPlanBenefitPublic>
}

/**
 * Modelo para retornar uma lista de planos de assinatura via API.
 */
export type SubscriptionPlansPublic = {
  plans?: Array<SubscriptionPlanPublic>
}

/**
 * Modelo para atualização de planos de assinatura via API.
 */
export type SubscriptionPlanUpdate = {
  name?: string | null
  price?: number | null
  has_badge?: boolean | null
  badge_text?: string | null
  button_text?: string | null
  button_enabled?: boolean | null
  has_discount?: boolean | null
  price_without_discount?: number | null
  currency?: string | null
  description?: string | null
  is_active?: boolean | null
  metric_type?: SubscriptionMetric | null
  metric_value?: number | null
  benefits?: Array<SubscriptionPlanBenefitPublic> | null
}

/**
 * Modelo de assinatura para retorno via API.
 */
export type SubscriptionPublic = {
  id: string
  user_id: string
  subscription_plan_id: string
  start_date: string
  end_date: string
  is_active: boolean
  metric_type: SubscriptionMetric
  metric_status: number
  payment_recurrence_status: PaymentRecurrenceStatus
  subscription_plan?: SubscriptionPlan | null
}

/**
 * Modelo estendido de assinatura para retorno via API com pagamentos.
 */
export type SubscriptionPublicExtended = {
  id: string
  user_id: string
  subscription_plan_id: string
  start_date: string
  end_date: string
  is_active: boolean
  metric_type: SubscriptionMetric
  metric_status: number
  payment_recurrence_status: PaymentRecurrenceStatus
  subscription_plan?: SubscriptionPlan | null
  payments?: Array<PaymentPublic>
}

/**
 * Modelo para resposta de saúde do sistema
 */
export type SystemHealthResponse = {
  total_sessions: number
  status_counts: {
    [key: string]: number
  }
  recent_sessions: number
  error_sessions: number
  stalled_sessions: number
  zombie_sessions: number
  timestamp: string
}

/**
 * Modelo para representar tokens JWT de autenticação.
 */
export type Token = {
  access_token: string
  token_type?: string
}

/**
 * Modelo usado para atualização de senha.
 */
export type UpdatePassword = {
  current_password: string
  new_password: string
}

/**
 * Modelo para exibição pública de uma ação do usuário
 */
export type UserActionPublic = {
  id: string
  bot_session_id: string
  action_type: UserActionType
  description: string
  input_field?: string | null
  is_completed: boolean
  user_input?: string | null
  requested_at: string
  completed_at?: string | null
}

/**
 * Modelo para resposta de listagem de ações
 */
export type UserActionsResponse = {
  total: number
  items: Array<UserActionPublic>
}

/**
 * Tipos de ações que o usuário pode precisar executar.
 */
export type UserActionType =
  | "provide_2fa"
  | "solve_captcha"
  | "answer_question"
  | "confirm_action"

/**
 * Modelo usado na criação de usuários via API.
 */
export type UserCreate = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  is_subscriber?: boolean
  full_name?: string | null
  password: string
}

/**
 * Estatísticas do usuário para o dashboard.
 */
export type UserDashboardStats = {
  total_applications: number
  successful_applications: number
  success_rate: number
  failed_applications: number
  failure_rate: number
  pending_applications: number
  timestamp: string
}

/**
 * Modelo de usuário para retorno via API.
 */
export type UserPublic = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  is_subscriber?: boolean
  full_name?: string | null
  id: string
}

/**
 * Modelo usado para registro de novos usuários.
 */
export type UserRegister = {
  email: string
  password: string
  full_name?: string | null
}

/**
 * Modelo para retornar uma lista de usuários via API.
 */
export type UsersPublic = {
  data: Array<UserPublic>
  count: number
}

/**
 * Modelo usado para atualização de usuários via API.
 */
export type UserUpdate = {
  email?: string | null
  is_active?: boolean
  is_superuser?: boolean
  is_subscriber?: boolean
  full_name?: string | null
  password?: string | null
}

/**
 * Modelo usado por usuários para atualizar seu próprio perfil.
 */
export type UserUpdateMe = {
  full_name?: string | null
  email?: string | null
}

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type WorkPreferences = {
  /**
   * Open to remote work
   */
  remote_work: boolean
  /**
   * Open to in-person work
   */
  in_person_work: boolean
  /**
   * Open to relocation
   */
  open_to_relocation: boolean
  /**
   * Willing to complete assessments
   */
  willing_to_complete_assessments: boolean
  /**
   * Willing to undergo drug tests
   */
  willing_to_undergo_drug_tests: boolean
  /**
   * Willing to undergo background checks
   */
  willing_to_undergo_background_checks: boolean
}

export type GetSessionActionsData = {
  includeCompleted?: boolean
  limit?: number
  sessionId: string
  skip?: number
}

export type GetSessionActionsResponse = UserActionsResponse

export type CompleteActionData = {
  actionId: string
  requestBody: ActionResponse
  sessionId: string
}

export type CompleteActionResponse = Message

export type GetSessionAppliesData = {
  limit?: number
  requestBody?: Array<string> | null
  sessionId: string
  skip?: number
}

export type GetSessionAppliesResponse = AppliesResponse

export type GetAppliesSummaryData = {
  sessionId: string
}

export type GetAppliesSummaryResponse = ApplySummary

export type GetApplyDetailsData = {
  applyId: number
  sessionId: string
}

export type GetApplyDetailsResponse = ApplyPublic

export type CreateBotSessionData = {
  requestBody: SessionCreate
}

export type CreateBotSessionResponse = SessionPublic

export type GetBotSessionsData = {
  limit?: number
  skip?: number
}

export type GetBotSessionsResponse = SessionsResponse

export type GetBotSessionData = {
  sessionId: string
}

export type GetBotSessionResponse = SessionPublic

export type DeleteBotSessionData = {
  sessionId: string
}

export type DeleteBotSessionResponse = Message

export type StartBotSessionData = {
  sessionId: string
}

export type StartBotSessionResponse = SessionPublic

export type StopBotSessionData = {
  sessionId: string
}

export type StopBotSessionResponse = SessionPublic

export type PauseBotSessionData = {
  sessionId: string
}

export type PauseBotSessionResponse = SessionPublic

export type ResumeBotSessionData = {
  sessionId: string
}

export type ResumeBotSessionResponse = SessionPublic

export type GetUserDashboardStatsResponse = UserDashboardStats

export type RegisterApplyData = {
  /**
   * Bot API Key
   */
  apiKey: string
  requestBody: BotApplyCreate
}

export type RegisterApplyResponse = Message

export type GetBotConfigData = {
  /**
   * Bot API Key
   */
  apiKey: string
}

export type GetBotConfigResponse = BotConfigResponse

export type StripeSuccessData = {
  sessionId: string
}

export type StripeSuccessResponse = Message

export type GetStripeCheckoutSessionByIdData = {
  sessionId: string
}

export type GetStripeCheckoutSessionByIdResponse = CheckoutSessionPublic

export type UpdateStripeCheckoutSessionData = {
  requestBody: CheckoutSessionUpdate
  sessionId: string
}

export type UpdateStripeCheckoutSessionResponse = CheckoutSessionPublic

export type GetStripeCheckoutSessionsData = {
  limit?: number
  skip?: number
}

export type GetStripeCheckoutSessionsResponse = Array<CheckoutSessionPublic>

export type CreateStripeCheckoutSessionData = {
  subscriptionPlanId: string
}

export type CreateStripeCheckoutSessionResponse = CheckoutSessionPublic

export type StripeWebhookData = {
  stripeSignature?: string
}

export type StripeWebhookResponse = Message

export type StripeCancelData = {
  sessionId: string
}

export type StripeCancelResponse = Message

export type GetConfigResponse = ConfigPublic

export type UpdateConfigData = {
  requestBody: ConfigPublic
}

export type UpdateConfigResponse = unknown

export type GetPlainTextResumeResponse = PlainTextResumePublic

export type UpdatePlainTextResumeData = {
  requestBody: PlainTextResumePublic
}

export type UpdatePlainTextResumeResponse = unknown

export type GetUserCredentialsResponse = CredentialsResponse

export type CreateCredentialsData = {
  requestBody: CredentialsCreate
}

export type CreateCredentialsResponse = CredentialsPublic

export type UpdateCredentialsData = {
  credentialsId: string
  requestBody: CredentialsUpdate
}

export type UpdateCredentialsResponse = CredentialsPublic

export type DeleteCredentialsData = {
  credentialsId: string
}

export type DeleteCredentialsResponse = Message

export type GetSessionEventsData = {
  eventType?: string | null
  limit?: number
  sessionId: string
  skip?: number
}

export type GetSessionEventsResponse = EventsResponse

export type GetSessionEventsSummaryData = {
  sessionId: string
}

export type GetSessionEventsSummaryResponse = EventSummary

export type LoginAccessTokenData = {
  formData: Body_login_login_access_token
}

export type LoginAccessTokenResponse = Token

export type TestTokenResponse = UserPublic

export type RecoverPasswordData = {
  email: string
}

export type RecoverPasswordResponse = Message

export type ResetPasswordData = {
  requestBody: NewPassword
}

export type ResetPasswordResponse = Message

export type RecoverPasswordHtmlContentData = {
  email: string
}

export type RecoverPasswordHtmlContentResponse = string

export type GetAllActiveSessionsResponse = ActiveSessionsResponse

export type GetSessionsStatusSummaryResponse = SystemHealthResponse

export type GetKubernetesPodsResponse = KubernetesPodsResponse

export type ForceStopSessionData = {
  sessionId: string
}

export type ForceStopSessionResponse = Message

export type ReadPaymentsByCurrentUserData = {
  limit?: number
  skip?: number
}

export type ReadPaymentsByCurrentUserResponse = PaymentsPublic

export type ReadPaymentsByUserIdData = {
  limit?: number
  skip?: number
  userId: string
}

export type ReadPaymentsByUserIdResponse = PaymentsPublic

export type ReadPaymentsData = {
  limit?: number
  skip?: number
}

export type ReadPaymentsResponse = PaymentsPublic

export type ReadSubscriptionPlansData = {
  onlyActive?: boolean
}

export type ReadSubscriptionPlansResponse = SubscriptionPlansPublic

export type CreateSubscriptionPlanData = {
  requestBody: SubscriptionPlanCreate
}

export type CreateSubscriptionPlanResponse = SubscriptionPlanPublic

export type ReadSubscriptionPlanData = {
  id: string
}

export type ReadSubscriptionPlanResponse = SubscriptionPlanPublic

export type UpdateSubscriptionPlanData = {
  id: string
  requestBody: SubscriptionPlanUpdate
}

export type UpdateSubscriptionPlanResponse = Message

export type DeleteSubscriptionPlanData = {
  id: string
}

export type DeleteSubscriptionPlanResponse = Message

export type GetUserSubscriptionsData = {
  onlyActive?: boolean | null
}

export type GetUserSubscriptionsResponse = Array<SubscriptionPublic>

export type GetUserSubscriptionData = {
  subscriptionId: string
}

export type GetUserSubscriptionResponse = SubscriptionPublicExtended

export type GetUserSubscriptionsByIdData = {
  onlyActive?: boolean | null
  userId: string
}

export type GetUserSubscriptionsByIdResponse = Array<SubscriptionPublic>

export type CancelUserSubscriptionData = {
  subscriptionId: string
}

export type CancelUserSubscriptionResponse = Message

export type ReactivateUserSubscriptionData = {
  subscriptionId: string
}

export type ReactivateUserSubscriptionResponse = Message

export type CancelUserSubscriptionByIdData = {
  subscriptionId: string
  userId: string
}

export type CancelUserSubscriptionByIdResponse = Message

export type ReactivateUserSubscriptionByIdData = {
  subscriptionId: string
  userId: string
}

export type ReactivateUserSubscriptionByIdResponse = Message

export type ReadUsersData = {
  limit?: number
  skip?: number
}

export type ReadUsersResponse = UsersPublic

export type CreateUserData = {
  requestBody: UserCreate
}

export type CreateUserResponse = UserPublic

export type ReadUserMeResponse = UserPublic

export type UpdateUserMeData = {
  requestBody: UserUpdateMe
}

export type UpdateUserMeResponse = UserPublic

export type UpdatePasswordMeData = {
  requestBody: UpdatePassword
}

export type UpdatePasswordMeResponse = Message

export type RegisterUserData = {
  requestBody: UserRegister
}

export type RegisterUserResponse = UserPublic

export type ReadUserByIdData = {
  userId: string
}

export type ReadUserByIdResponse = UserPublic

export type UpdateUserData = {
  requestBody: UserUpdate
  userId: string
}

export type UpdateUserResponse = UserPublic

export type DeleteUserData = {
  userId: string
}

export type DeleteUserResponse = Message

export type TestEmailData = {
  emailTo: string
}

export type TestEmailResponse = Message

export type HealthCheckResponse = boolean
