/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as ResetPasswordImport } from './routes/reset-password'
import { Route as RecoverPasswordImport } from './routes/recover-password'
import { Route as LoginImport } from './routes/login'
import { Route as CheckoutSuccessImport } from './routes/checkout-success'
import { Route as CheckoutFailedImport } from './routes/checkout-failed'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutSettingsImport } from './routes/_layout/settings'
import { Route as LayoutResumeImport } from './routes/_layout/resume'
import { Route as LayoutPricingImport } from './routes/_layout/pricing'
import { Route as LayoutJobPreferencesImport } from './routes/_layout/job-preferences'
import { Route as LayoutAdminImport } from './routes/_layout/admin'
import { Route as LayoutSettingsIndexImport } from './routes/_layout/settings/index'
import { Route as LayoutSettingsSubscriptionIndexImport } from './routes/_layout/settings/subscription/index'
import { Route as LayoutSettingsSubscriptionSubscriptionIdImport } from './routes/_layout/settings/subscription/$subscriptionId'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordRoute = ResetPasswordImport.update({
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const RecoverPasswordRoute = RecoverPasswordImport.update({
  path: '/recover-password',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const CheckoutSuccessRoute = CheckoutSuccessImport.update({
  path: '/checkout-success',
  getParentRoute: () => rootRoute,
} as any)

const CheckoutFailedRoute = CheckoutFailedImport.update({
  path: '/checkout-failed',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSettingsRoute = LayoutSettingsImport.update({
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutResumeRoute = LayoutResumeImport.update({
  path: '/resume',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutPricingRoute = LayoutPricingImport.update({
  path: '/pricing',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutJobPreferencesRoute = LayoutJobPreferencesImport.update({
  path: '/job-preferences',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAdminRoute = LayoutAdminImport.update({
  path: '/admin',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSettingsIndexRoute = LayoutSettingsIndexImport.update({
  path: '/',
  getParentRoute: () => LayoutSettingsRoute,
} as any)

const LayoutSettingsSubscriptionIndexRoute =
  LayoutSettingsSubscriptionIndexImport.update({
    path: '/subscription/',
    getParentRoute: () => LayoutSettingsRoute,
  } as any)

const LayoutSettingsSubscriptionSubscriptionIdRoute =
  LayoutSettingsSubscriptionSubscriptionIdImport.update({
    path: '/subscription/$subscriptionId',
    getParentRoute: () => LayoutSettingsRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/checkout-failed': {
      preLoaderRoute: typeof CheckoutFailedImport
      parentRoute: typeof rootRoute
    }
    '/checkout-success': {
      preLoaderRoute: typeof CheckoutSuccessImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/recover-password': {
      preLoaderRoute: typeof RecoverPasswordImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      preLoaderRoute: typeof ResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/_layout/admin': {
      preLoaderRoute: typeof LayoutAdminImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/job-preferences': {
      preLoaderRoute: typeof LayoutJobPreferencesImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/pricing': {
      preLoaderRoute: typeof LayoutPricingImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/resume': {
      preLoaderRoute: typeof LayoutResumeImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/settings': {
      preLoaderRoute: typeof LayoutSettingsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/settings/': {
      preLoaderRoute: typeof LayoutSettingsIndexImport
      parentRoute: typeof LayoutSettingsImport
    }
    '/_layout/settings/subscription/$subscriptionId': {
      preLoaderRoute: typeof LayoutSettingsSubscriptionSubscriptionIdImport
      parentRoute: typeof LayoutSettingsImport
    }
    '/_layout/settings/subscription/': {
      preLoaderRoute: typeof LayoutSettingsSubscriptionIndexImport
      parentRoute: typeof LayoutSettingsImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  LayoutRoute.addChildren([
    LayoutAdminRoute,
    LayoutJobPreferencesRoute,
    LayoutPricingRoute,
    LayoutResumeRoute,
    LayoutSettingsRoute.addChildren([
      LayoutSettingsIndexRoute,
      LayoutSettingsSubscriptionSubscriptionIdRoute,
      LayoutSettingsSubscriptionIndexRoute,
    ]),
    LayoutIndexRoute,
  ]),
  CheckoutFailedRoute,
  CheckoutSuccessRoute,
  LoginRoute,
  RecoverPasswordRoute,
  ResetPasswordRoute,
  SignupRoute,
])

/* prettier-ignore-end */
